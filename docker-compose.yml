version: '3.8'

# Your Task: Implement a docker-compose.yml file that sets up:
# 1. MLflow tracking server with a database backend
# 2. DVC remote storage using MinIO or similar
# 3. Any additional services needed for the pipeline

services:
  # Define MLflow tracking server
  # ...
    tracking-server:
      build:
        context: .
        dockerfile: "${DOCKERFILE:-Dockerfile}"
      depends_on:
        - postgres
        - artifacts-server
      expose:
        - "5000"
      ports:
        # MLflow UI is available at http://localhost:5000
        - "5000:5000"
      command: >
        mlflow server
        --host 0.0.0.0
        --port 5000
        --backend-store-uri postgresql://user:password@postgres:5432/db
        --default-artifact-root http://0.0.0.0:5500/api/2.0/mlflow-artifacts/artifacts/experiments
        --gunicorn-opts "--log-level debug"

  # Define database for MLflow
  # ...
    postgres:
      image: postgres
      restart: always
      environment:
        POSTGRES_DB: db
        POSTGRES_USER: user
        POSTGRES_PASSWORD: password

  # Define another mlflow again for artifact store
  # ...
    artifacts-server:
      build:
        context: .
        dockerfile: "${DOCKERFILE:-Dockerfile}"
      depends_on:
        - minio-create-bucket
      expose:
        - "5500"
      ports:
        - "5500:5500"
      environment:
        MLFLOW_S3_ENDPOINT_URL: http://minio:9000
        AWS_ACCESS_KEY_ID: "user"
        AWS_SECRET_ACCESS_KEY: "WW4e69Wwcv0w"
      command: >
        mlflow server
        --host 0.0.0.0
        --port 5500
        --artifacts-destination s3://models-bucket
        --gunicorn-opts "--log-level debug"
        --artifacts-only
  

  # Define MinIO  remote storage
  # ...

    minio:
      image: minio/minio
      expose:
        - "9000"
      ports:
        - "9000:9000"
        # MinIO Console is available at http://localhost:9001
        - "9001:9001"
      environment:
        MINIO_ROOT_USER: "user"
        MINIO_ROOT_PASSWORD: "WW4e69Wwcv0w"
      healthcheck:
        test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
        interval: 1s
        timeout: 10s
        retries: 5
      # Note there is no bucket by default
      command: server /data --console-address ":9001"

  # TODO: Add any additional services you consider necessary
  # ...
    minio-create-bucket:
      image: minio/mc
      depends_on:
        minio:
          condition: service_healthy
      entrypoint: >
        bash -c "
        mc alias set minio http://minio:9000 user WW4e69Wwcv0w &&
        if ! mc ls minio/models-bucket; then
          mc mb minio/models-bucket
        else
          echo 'models-bucket already exists'
        fi &&
        if ! mc ls minio/dataset-bucket; then
          mc mb minio/dataset-bucket
        else
          echo 'dataset-bucket already exists'
        fi
        "
      # entrypoint: >
      #   bash -c "
      #   mc alias set minio http://minio:9000 user WW4e69Wwcv0w &&
      #   if ! mc ls minio/models-bucket; then
      #     mc mb minio/models-bucket
      #   else
      #     echo 'models-bucket already exists'
      #   fi &&
      #   if ! mc ls minio/dataset-bucket; then
      #     mc mb minio/dataset-bucket
      #   else
      #     echo 'dataset-bucket already exists'
      #   fi &&
      #   mc admin accesskey create        \
      #   minio/dataset-bucket user               \
      #   --access-key useraccesskey  \
      #   --secret-key usersecretkey  \
      #   "

#volumes:
  # TODO: Define persistent volumes
  # ...

# Add networks if necessary
# networks:
#   ...
